#sends packets via uart to the Nice BUS T4
#test on Wemos D1 mini

esphome:
  name: bengate
  friendly_name: BenGate

esp32:
  board: esp32dev
  framework:
    type: esp-idf


external_components:
  - source:
      type: git
      url: https://github.com/bentech/Nice_BusT4_Bidi
      # type: local
      # path: components

# enable debugging to find the cause of the reboot through logging
debug:
    
# Enable logging
logger:
  level: DEBUG
#  level: VERBOSE
  baud_rate: 0


# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key
    
  reboot_timeout: 0s # otherwise reboots when disconnected from hassio  
  services:
# to send hex commands to the bus T4
  - service: raw_command
    variables:
        raw_cmd: string
    then:
      lambda: |-
         nice_cover -> NiceBusT4::send_raw_cmd(raw_cmd);
         
  - service: send_inf_command
    variables:
       to_addr: string
       whose: string
       command: string
       type_command: string
       next_data: string
       data_on: bool
       data_command: string
    then:
      lambda: |-
        nice_cover -> NiceBusT4::send_inf_cmd(to_addr, whose, command, type_command, next_data, data_on, data_command);

# sash length recognition
  - service: gate_length_recognition
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("0b","01");

# BlueBus device recognition
  - service: devices_recognition
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("0a","01");


#        std::vector < uint8_t > v_to_addr = nice_cover -> NiceBusT4::raw_cmd_prepare (to_addr);
#        std::vector < uint8_t > v_whose = nice_cover -> NiceBusT4::raw_cmd_prepare (whose);
#        std::vector < uint8_t > v_command = nice_cover -> NiceBusT4::raw_cmd_prepare (command);
#        std::vector < uint8_t > v_command = nice_cover -> NiceBusT4::raw_cmd_prepare (command);
#        std::vector < uint8_t > v_type_command = nice_cover -> NiceBusT4::raw_cmd_prepare (type_command);
#        std::vector < uint8_t > v_data_command = nice_cover -> NiceBusT4::raw_cmd_prepare (data_command);
#        if (data_on) {
#          nice_cover -> NiceBusT4::tx_buffer_.push(nice_cover -> NiceBusT4::gen_inf_cmd(v_to_addr[0], v_to_addr[1], v_whose[0], v_command[0], v_type_command[0], v_data_command, v_data_command.size()));
#        } else {
#          nice_cover -> NiceBusT4::tx_buffer_.push(nice_cover -> NiceBusT4::gen_inf_cmd(v_to_addr[0], v_to_addr[1], v_whose[0], v_command[0], v_type_command[0]));
#        }
        


 # closing force
  - service: closing_force
    variables:
      force: string
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("4b", force);         
         

# opening force
  - service: opening_force
    variables:
      force: string
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("4a", force);
ota:
  - platform: esphome # For ESPHOME 2024.6.1

# Set statul led for Wemos D1 mini
status_led:
  pin: 
    number: GPIO2
    inverted: true

wifi:
  ssid: !secret wifi_ssid
  password:  !secret wifi_password
#  domain: !secret wifi_domain


  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Hotspot"
    password: !secret ota_pass


captive_portal:


# Enable web server (can be disabled)
web_server:
  port: 80
#  js_include: "www.js"
#  js_url: ""
#  version: 2

uart:
  id: uart_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9200
  
cover:
- platform: bus_t4
  name: "Nice Cover"
  id: nice_cover

# Buttons for sending commands
button:
  - platform: template
    name: Step-by-step
    id: sbs
    on_press:
      lambda: |-
           nice_cover -> NiceBusT4::send_cmd(bus_t4::SBS);

#         nice_cover -> NiceBusT4::send_raw_cmd("55 0c 00 ff 00 66 01 05 9D 01 82 01 64 E6 0c");

  - platform: template
    name: Inputs Status
    id: in_stat
    on_press:
      lambda: |-
           nice_cover -> NiceBusT4::send_raw_cmd("55.0D.00.03.00.66.08.06.6B.04.D0.99.00.00.4D.0D");

#         nice_cover -> NiceBusT4::send_raw_cmd("55 0c 00 ff 00 66 01 05 9D 01 82 01 64 E6 0c");
# 55.0E.00.03.00.81.08.07.8D.04.0B.A9.00.01.01.A6.0E поиск положений


  - platform: template
    name: Partial opening 1
    id: p_opn1
    on_press:
      lambda: |-
         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN1);
                      
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::STOP);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::OPEN);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::CLOSE);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN2);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN3);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN4);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN5);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN6);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLK_OPN);  # Unlock and open 
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::CLS_LOCK);  # Close and Lock 
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLCK_CLS); # Unlock and Close
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::LOCK);      # Lock
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLOCK);    # UnLock
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_SBS);  # Host SBS
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_OPN);  # Host Open
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_CLS);  # Host Close
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_SBS); # Slave SBS
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_OPN); # Slave Open
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_CLS); # Slave Close
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_ON);   # Auto-opening active
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_OFF);  # Auto-opening is inactive


# work with an OXI receiver

# disable the auto-closing of the gate, if necessary for loading and unloading operations
switch:
  - platform: template
    name: "Auto-closing"
    id: autoclose
    restore_mode: DISABLED
#    optimistic: true
    lambda: |-
      if (nice_cover -> NiceBusT4::autocls_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");
    turn_off_action:
      lambda: |-
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "00");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "00");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");


              
#script:
#  - id: send_cmd
#    then:
#      - switch.turn_on: my_switch
#      - delay: 1s
#      - switch.turn_off: my_switch
